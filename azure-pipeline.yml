trigger:
  batch: true
  branches:
    include: 
    - '*'
  paths:
    exclude:
    - README.md
    - .github/

pr: none

variables:
  helmVersion: 3.2.4
  registryServerName: '$(registryName).azurecr.io'
  projectName: myblog
  chartName: $(registryServerName)/helm/$(projectName)
  dnsName: $(projectName)
  hostName: alwaysupalwayson.com
  nginxIngressVersion: 0.33.0
  helmChartVersion: v$(build.buildId)
  skipComponentGovernanceDetection: true
  # Additional variables needed to be defined in the Azure Pipeline definition:
  # For Build/CI stage: registryName, registryLogin and registryPassword.
  # For Release/CD stage: registryName, registryLogin, registryPassword, aksName, aksRgName, aksLocation, aksSpId, aksSpSecret and aksSpTenantId.

pool:
  name: mabenoittesttf
  #imageName: ubuntu-latest

stages:
- stage: 'Build'
  displayName: 'Build'
  jobs:
  - job: Build_Container_Image
    variables:
      imageTag: $(build.buildId)
    displayName: 'build and push container image'
    steps:
    - checkout: self
      submodules: true
    - bash: |
        docker build \
            -t $(registryServerName)/$(projectName):$(imageTag) \
            .
      failOnStderr: true
      displayName: 'docker build'
    - bash: |
        echo '$(registryPassword)' | docker login \
            $(registryServerName) \
            -u $(registryLogin) \
            --password-stdin
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: 'docker login'
    - bash: |
        docker push $(registryServerName)/$(projectName):$(imageTag)
      failOnStderr: true
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: 'docker push'
  - job: Package_Helm_Chart
    variables:
      imageTag: $(build.buildId)
    displayName: 'package and push helm chart'
    dependsOn: Build_Container_Image
    steps:
    - task: HelmInstaller@1
      displayName: 'install helm'
      inputs:
        helmVersionToInstall: $(helmVersion)
    - bash: |
        cd chart/
        export HELM_EXPERIMENTAL_OCI=1
        helm package \
            --dependency-update \
            --version $(helmChartVersion) \
            --app-version $(imageTag) \
            .
      failOnStderr: true
      displayName: 'helm package'
    - bash: |
        cd chart/
        chartPackage=$(ls $(projectName)-$(helmChartVersion).tgz)
        export HELM_EXPERIMENTAL_OCI=1
        helm chart save $chartPackage $(chartName)
        echo '$(registryPassword)' | helm registry login \
            $(registryServerName) \
            -u $(registryLogin) \
            --password-stdin
        helm chart push $(chartName):$(helmChartVersion)
        # cleanup
        helm chart remove $(chartName):$(helmChartVersion)
        rm *.tgz
      failOnStderr: true
      name: helmPush
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: 'helm push'
- stage: 'Release'
  displayName: 'Release'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Deploy_Helm_Chart
    variables:
      k8sNamespace: $(projectName)
    displayName: 'deploy helm chart into aks'
    steps:
    - checkout: none
    - task: HelmInstaller@1
      displayName: 'install helm'
      inputs:
        helmVersionToInstall: $(helmVersion)
    - bash: |
        az login \
            --service-principal \
            -u $(aksSpId) \
            -p '$(aksSpSecret)' \
            --tenant $(aksSpTenantId)
        az aks get-credentials \
            -n $(aksName) \
            -g $(aksResourceGroupName)
      failOnStderr: true
      displayName: 'az aks get-credentials'
    - bash: |
        openssl req \
          -x509 \
          -nodes \
          -days 365 \
          -newkey rsa:2048 \
          -out $(projectName).crt \
          -keyout $(projectName).key \
          -subj "/CN=$(hostName)/O=$(projectName)"
        kubectl create secret tls ingress-tls \
          -n $(k8sNamespace) \
          --key $(projectName).key \
          --cert $(projectName).crt
        rm $(projectName).crt $(projectName).key
      failOnStderr: true
      displayName: 'create ingress-tls secret'
    - bash: |
        export HELM_EXPERIMENTAL_OCI=1
        echo '$(registryPassword)' | helm registry login \
            $(registryServerName) \
            -u $(registryLogin) \
            --password-stdin
        helm chart pull $(chartName):$(helmChartVersion)
        helm chart export $(chartName):$(helmChartVersion) --destination ./install
        helm upgrade \
            --namespace $(k8sNamespace) \
            --create-namespace \
            --install \
            --history-max 1 \
            --wait \
            --set image.repository=$(registryServerName)/$(projectName) \
            --set networkpolicies.enabled=$(networkPoliciesEnabled) \
            --set ingress.hostName=$(hostName) \
            --set ingress-nginx.defaultBackend.enabled=false \
            --set ingress-nginx.controller.scope.enabled=true \
            --set ingress-nginx.controller.image.tag=$(nginxIngressVersion) \
            $(projectName) \
            ./install/$(projectName)
        # cleanup
        rm -r ./install
        helm chart remove $(chartName):$(helmChartVersion)
      failOnStderr: true
      displayName: 'deploy helm chart'
