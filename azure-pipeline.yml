trigger:
  batch: true
  branches:
    include: 
    - '*'
  paths:
    exclude:
    - README.md
    - .github/

pr: none

variables:
  helmVersion: 3.2.0
  registryServerName: '$(registryName).azurecr.io'
  projectName: myblog
  hostName: alwaysupalwayson.com
  nginxIngressVersion: 0.30.0
  helmChartVersion: $(build.buildId)
  skipComponentGovernanceDetection: true
  # Additional variables needed to be defined in the Azure Pipeline definition:
  # For Build/CI stage: registryName, registryLogin and registryPassword.
  # For Release/CD stage: registryName, registryLogin, registryPassword, aksName, aksRgName, aksLocation, aksSpId, aksSpSecret and aksSpTenantId.

pool:
  name: mabenoittest9578
  #imageName: ubuntu-latest

stages:
- stage: 'Build'
  displayName: 'Build'
  jobs:
  - job: Build_Container_Image
    variables:
      imageTag: $(build.buildId)
    displayName: 'build and push container image'
    steps:
    - checkout: self
      submodules: true
    - bash: |
        docker build \
            -t $(registryServerName)/$(projectName):$(imageTag) \
            .
      failOnStderr: true
      displayName: 'docker build'
    - bash: |
        echo $(registryPassword) | docker login \
            $(registryServerName) \
            -u $(registryLogin) \
            --password-stdin
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: 'docker login'
    - bash: |
        docker push $(registryServerName)/$(projectName):$(imageTag)
      failOnStderr: true
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: 'docker push'
  - job: Package_Helm_Chart
    variables:
      imageTag: $(build.buildId)
    displayName: 'package and push helm chart'
    dependsOn: Build_Container_Image
    steps:
    - task: HelmInstaller@1
      displayName: 'install helm'
      inputs:
        helmVersionToInstall: $(helmVersion)
    - bash: |
        cd chart/
        helm dependency update
        helm package \
            --version $(helmChartVersion) \
            --app-version $(imageTag) \
            .
      failOnStderr: true
      displayName: 'helm package'
    - bash: |
        cd chart/
        chartPackage=$(ls $(projectName)-$(helmChartVersion).tgz)
        az acr helm push \
            -n $(registryName) \
            -u $(registryLogin) \
            -p $(registryPassword) \
            $chartPackage
      failOnStderr: true
      name: helmPush
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: 'az acr helm push'
- stage: 'Release'
  displayName: 'Release'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Deploy_Helm_Chart
    variables:
      k8sNamespace: $(projectName)
    displayName: 'deploy helm chart into aks'
    steps:
    - checkout: none
    - task: HelmInstaller@1
      displayName: 'install helm'
      inputs:
        helmVersionToInstall: $(helmVersion)
    - bash: |
        az login \
            --service-principal \
            -u $(aksSpId) \
            -p $(aksSpSecret) \
            --tenant $(aksSpTenantId)
        az aks get-credentials \
            -n $(aksName) \
            -g $(aksResourceGroupName)
        helm repo add \
            $(registryName) \
            https://$(registryServerName)/helm/v1/repo \
            --username $(registryLogin) \
            --password $(registryPassword)
        helm upgrade \
            --namespace $(k8sNamespace) \
            --create-namespace \
            --install \
            --wait \
            --version $(helmChartVersion) \
            --set image.repository=$(registryServerName)/$(projectName) \
            --set networkpolicies.enabled=$(networkPoliciesEnabled) \
            --set ingress.hostName=$(hostName) \
            --set issuer.acme.email=$(issuerEmail) \
            --set nginx-ingress.defaultBackend.enabled=false \
            --set nginx-ingress.controller.scope.enabled=true \
            --set nginx-ingress.controller.image.tag=$(nginxIngressVersion) \
            $(projectName) \
            $(registryName)/$(projectName)
      failOnStderr: true
      displayName: 'deploy helm chart'
