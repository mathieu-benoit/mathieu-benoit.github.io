steps:
- name: gcr.io/cloud-builders/git
  id: git clone
  args: ['clone', '--recurse-submodules', 'https://github.com/${_REPO_OWNER}/${_APP_NAME}']
- name: gcr.io/cloud-builders/docker
  id: manage base images
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |
    # Grab the build base image in our private registry
    baseImage=$(cat ${_APP_NAME}/Dockerfile | grep 'FROM alpine')
    baseImage=($baseImage)
    docker pull ${baseImage[1]}
    newImage=$(echo ${baseImage[1]} | sed "s,alpine,${_CONTAINER_REGISTRY_NAME}/alpine,g")
    docker tag ${baseImage[1]} $newImage
    docker push $newImage
    # Grab the runtime base image in our private registry
    baseImage=$(cat ${_APP_NAME}/Dockerfile | grep 'FROM nginxinc')
    baseImage=($baseImage)
    docker pull ${baseImage[1]}
    newImage=$(echo ${baseImage[1]} | sed "s,nginxinc,${_CONTAINER_REGISTRY_NAME},g")
    docker tag ${baseImage[1]} $newImage
    docker push $newImage
    # Use the base images from our own private registry
    sed -i "s,FROM alpine,FROM ${_CONTAINER_REGISTRY_NAME}/alpine,g;s,FROM nginxinc,FROM ${_CONTAINER_REGISTRY_NAME},g" ${_APP_NAME}/Dockerfile
- name: gcr.io/cloud-builders/docker
  id: build container
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |
    docker build -t ${_CONTAINER_REGISTRY_NAME}/${_APP_NAME}:$SHORT_SHA ${_APP_NAME}/.
    imageSize=$(printf %.2f "$(($(docker image inspect ${_CONTAINER_REGISTRY_NAME}/${_APP_NAME}:$SHORT_SHA --format='{{.Size}}') * 10**2 / $(printf '%5.0f\n' 1e6)))e-2")
    echo "IMAGE_SIZE=$imageSize"
- name: gcr.io/cloud-builders/docker
  id: dockle
  args: ['run', '-v', '/var/run/docker.sock:/var/run/docker.sock', '--rm', 'goodwithtech/dockle:latest', '--exit-code', '1', '--exit-level', 'fatal', '${_CONTAINER_REGISTRY_NAME}/${_APP_NAME}:$SHORT_SHA']
- name: gcr.io/cloud-builders/docker
  id: trivy
  args: ['run', '-v', '/var/run/docker.sock:/var/run/docker.sock', '--rm', 'aquasec/trivy', 'image', '--severity', '${_SEVERITY}', '${_CONTAINER_REGISTRY_NAME}/${_APP_NAME}:$SHORT_SHA']
- name: gcr.io/cloud-builders/docker
  id: docker run
  args: ['run', '-d', '-p', '8080:8080', '--read-only', '--cap-drop=ALL', '--user=1000', '${_CONTAINER_REGISTRY_NAME}/${_APP_NAME}:$SHORT_SHA']
- id: gcloud scan
  name: gcr.io/cloud-builders/gcloud
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |
    gcloud artifacts docker images scan '${_CONTAINER_REGISTRY_NAME}/${_APP_NAME}:$SHORT_SHA' --format='value(response.scan)' > scan_id.txt
    gcloud artifacts docker images list-vulnerabilities $(cat scan_id.txt) --format='table(vulnerability.effectiveSeverity, vulnerability.cvssScore, noteName, vulnerability.packageIssue[0].affectedPackage, vulnerability.packageIssue[0].affectedVersion.name, vulnerability.packageIssue[0].fixedVersion.name)'
    gcloud artifacts docker images list-vulnerabilities $(cat scan_id.txt) --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq ${_SEVERITY}; then echo 'Failed vulnerability check' && exit 1; else exit 0; fi
- name: gcr.io/cloud-builders/docker
  id: push image in container registry
  args: ['push', '${_CONTAINER_REGISTRY_NAME}/${_APP_NAME}:$SHORT_SHA']
substitutions:
    _APP_NAME: myblog
    _REPO_OWNER: mathieu-benoit
    _CONTAINER_REGISTRY_NAME: SUBSTITUTE_ME
    _SEVERITY: CRITICAL
